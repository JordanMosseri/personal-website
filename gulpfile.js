var gulp = require('gulp');
var browserSync = require('browser-sync');
var sass = require('gulp-ruby-sass');
var reload = browserSync.reload;

gulp.task('sass', function() {
    return sass('app/styles/sass/*.scss')
        .pipe(gulp.dest('app/styles/css'))
        //.pipe(reload({ stream:true }));//browserSync.stream()
});

gulp.task('a', function() {
    reload({ stream:true });
});

var files = [
        'app/**/*.html',
        'app/styles/**/*.css',
        'app/scripts/**/*.js'
];
//var filesSass = files;filesSass.push('app/styles/sass/*.scss');

// watch files for changes and reload
gulp.task('serve', ['sass'], function() {
    browserSync({
        server: {
            baseDir: './'
        }
    });

    /*browserSync.init(files, {
        server: {
            baseDir: './app'
        }
    });*/

    gulp.watch('app/styles/sass/*.scss', ['sass'])/*.on('change', browserSync.reload)*/;
    gulp.watch(files, ['a'], {cwd: 'app'}, reload).on('change', browserSync.reload);


    //gulp.watch(filesSass, ['sass'], {cwd: 'app'}, reload).on('change', browserSync.reload);

});


//http://www.smashingmagazine.com/2014/06/building-with-gulp/
var uglify = require('gulp-uglify');
var //jshint = require('gulp-jshint'),
    concat = require('gulp-concat');
var runSequence = require('run-sequence');
var del = require('del');

/*gulp.task('minify', function () {
    gulp.src('js/app.js')
        .pipe(uglify())
        .pipe(gulp.dest('build'))
});*/
gulp.task('js', function () {
    return gulp.src('app/**/*.js')
        //.pipe(jshint())
        //.pipe(jshint.reporter('default'))
        .pipe(uglify())
        .pipe(concat('all.min.js'))
        .pipe(gulp.dest('dist/scripts'));
});

gulp.task('move-css', function () {
    return gulp.src('app/styles/css/*.css')
        .pipe(gulp.dest('dist/styles/css'));
});

gulp.task('dist', function(callback) {
    //js, move-css
    runSequence('clean',
        ['js', 'move-css'],
        //'build-html',
        callback);
});

gulp.task('clean', function() {
    // You can use multiple globbing patterns as you would with `gulp.src`
    return del(['dist']);
});

//------------------
//from c

// Utils
var replace = require('gulp-replace'),
    size = require('gulp-size'),
    newer = require('gulp-newer');
var gutil = require('gulp-util'),
    rev = require('gulp-rev'),
    insert = require('gulp-insert');
// Sass compilation
//var sass = require('gulp-sass');
// Css minify & uglify
// Uglification
var //uglify = require('gulp-uglify'),
    sourcemaps = require('gulp-sourcemaps'),
    //ngAnnotate = require('gulp-ng-annotate'),
// Minification
    usemin = require('gulp-usemin'),
    minifycss = require('gulp-minify-css'),
    minifyhtml = require('gulp-minify-html');
    //autoprefixer = require('gulp-autoprefixer');

// Paths
var baseDir = 'app/',
    buildDir = 'dist/',
    sassDir = 'sass/',
    cssDir = 'css/',
    kidsDir = 'kids/',
    resDir = 'res/',
    paramsDir = 'params/',
    fontsDir = 'styles/fonts/',
    fontsBuildDir = 'fonts/',
    i18nDir = 'i18n/',
    bootstrapDir = 'bower_components/bootstrap/dist/css/',
    fontAwesomeDir = 'bower_components/components-font-awesome/fonts/',
    cssBuildDir = 'css/',
    bootstrapFile = 'bootstrap.css.map';
var viewsDir = 'views/',
    index = 'index.html';
var webserviceHost = 'var WEBSERVICE_HOST = "pre-capico.excilys.com";';
var webserviceHostProd = 'var WEBSERVICE_HOST = "capico.excilys.com";';
//var p = require('../package.json');
//var version = 'var CAPICO_VERSION = "' + p.version + '" ;';
var size = require('gulp-size'),
    newer = require('gulp-newer'),
    del = require('del'),
    md5 = require('gulp-md5'),
    zip = require('gulp-zip'),
    //runSequence = require('run-sequence'),
    replace = require('gulp-replace'),
    insert = require('gulp-insert');
var using = require("gulp-using");


// Minification options
var htmlOpts = {
        conditionals: true,
        spare: true,
        empty: true,
        quotes: true
    },
    cssOpts = {
        benchmark: 1,
        compatibility: 'ie8',
        keepSpecialComments: 1
    };


gulp.task('clean', function () {
    // Coverage is generated by Jenkins
    return del(['dist', 'jshint.xml', 'coverage']);
});

gulp.task('zip', function () {
    gulp.src(buildDir + '**/*')
        .pipe(zip(buildDir + 'capico.zip'))
        .pipe(md5())
        .pipe(gulp.dest('.'))
        .pipe(size({title: 'zipped'}));
});

gulp.task('copy-font-css', function () {
    return gulp.src(baseDir + 'styles/*.css')
        .pipe(gulp.dest(buildDir + 'styles'));
});

gulp.task('copy-my-css', function () {
    return gulp.src(baseDir + 'styles/css/*.css')
        .pipe(gulp.dest(buildDir + 'styles/css'));
});

gulp.task('copy-imgs', function () {
    return gulp.src(baseDir + 'images/**')
        .pipe(gulp.dest(buildDir + 'images'));
});

gulp.task('package', ['clean'], function () {
    runSequence(
        'html-index',
        [//'html-shared-partials',
            'html-partials', //'pictures-shared', 'pictures'
            //'i18n',
            'bootstrap-map', 'font-awesome'//, 'fonts', 'pdfWorker'
            , 'copy-font-css'
            , 'copy-my-css'
            , 'copy-imgs'
        ],
        'zip'
    );
});

// Uglification & minification & lint
gulp.task('html-index', ['css-replace'], function () {
    return gulp.src(baseDir + index)
        .pipe(replace('href="../bower_components', 'href="bower_components'))
        .pipe(usemin({
            js: [
                'concat',
                size({title: 'non minified vendor.js size'}),
                uglify({mangle: false}),
                //rev(),
                size({title: 'minified vendor.js size'})
            ],
            jsApp: [
                //sourcemaps.init(),
                'concat',
                //ngAnnotate(),
                size({title: 'non minified app.js size'}),
                uglify(),
                //rev(),
                //sourcemaps.write('./'),
                size({title: 'minified app.js size'})
            ],
            css: [
                'concat',
                size({title: 'non minified style.css'}),
                minifycss(cssOpts),
                //autoprefixer('last 2 versions'),
                //rev(),
                size({title: 'minified style.css'})
            ],
            html: [
                minifyhtml(htmlOpts),
                size({title: 'index.html'})
            ]
        }))
        .on('error', gutil.log)
        .pipe(gulp.dest(buildDir));
});

gulp.task('html-partials', function () {
    var srcDir = baseDir + viewsDir + '**/*';
    var targetDir = buildDir + viewsDir;
    return gulp.src(srcDir)
        .pipe(newer(targetDir))
        .pipe(minifyhtml(htmlOpts))
        .pipe(gulp.dest(targetDir))
        .pipe(size({title: 'html-partials'}));
});

gulp.task('bootstrap-map', function () {
    var srcDir = bootstrapDir + bootstrapFile;
    var targetDir = buildDir + cssBuildDir;
    return gulp.src(srcDir)
        .pipe(newer(targetDir + bootstrapFile))
        .pipe(gulp.dest(targetDir))
        .pipe(size({title: 'bootstrap-map copied'}));
});

gulp.task('font-awesome', function () {
    var srcDir = fontAwesomeDir + '/*';
    var targetDir = buildDir + fontsBuildDir;
    return gulp.src(srcDir)
        .pipe(newer(targetDir))
        .pipe(gulp.dest(targetDir))
        .pipe(size({title: 'font-awesome copied'}));
});

gulp.task('default', ['sass'], function(){
});

// Sass compilation
gulp.task('sass-comp-kids',  function () {
    return gulp.src('app/styles/sass/*.scss')
        .pipe(sass({style: 'compressed'}))
        .on('error', sass.logError)
        //.pipe(autoprefixer('last 2 versions'))
        .pipe(gulp.dest('app/styles/css'))
        .pipe(size());
});

//gulp.task('sass-comp-shared',  function () {
    //return gulp.src(baseDir + sharedDir + sassDir + '**/*.scss')
        /*.pipe(sass({style: 'compressed'}))
        .on('error', sass.logError)
        .pipe(autoprefixer('last 2 versions'))
        .pipe(gulp.dest(baseDir + sharedDir + cssDir))
        .pipe(size());
});*/

// Css replaces for built version
gulp.task('css-replace', ['sass'], function () {
    var srcDir = baseDir + '**/*.css';
    return gulp.src(srcDir)
        .pipe(replace('\'/', '\'../'))
        .pipe(replace('"/', '"../'))
        .pipe(gulp.dest(baseDir))
        .pipe(size());
});

/*gulp.task('package-prod', ['clean'], function () {
 runSequence(
 'html-index',
 ['conf', 'prod-param', 'version', 'html-shared-partials',
 'html-partials', 'pictures-shared', 'pictures', 'i18n',
 'bootstrap-map', 'font-awesome', 'fonts', 'pdfWorker', 'mathJaxImport'],
 'zip'
 );
 });*/

//gulp.task('html-shared-partials', function () {
//var srcDir = baseDir + sharedDir + viewsDir + '**/*';
/*var targetDir = buildDir + sharedDir + viewsDir;
 return gulp.src(srcDir)
 .pipe(newer(targetDir))
 .pipe(minifyhtml(htmlOpts))
 .pipe(gulp.dest(targetDir))
 .pipe(size({title: 'html-shared-partials'}));
 });*/

/*gulp.task('fonts', function () {
 var srcDir = baseDir + kidsDir + fontsDir + '/*';
 var targetDir = buildDir + fontsBuildDir;
 return gulp.src(srcDir)
 .pipe(newer(targetDir))
 .pipe(gulp.dest(targetDir))
 .pipe(size({title: 'fonts copied'}));
 });

 gulp.task('i18n', function () {
 var srcDir = baseDir + i18nDir + '*.json';
 var targetDir = buildDir + i18nDir;
 return gulp.src(srcDir)
 .pipe(newer(targetDir))
 .pipe(gulp.dest(targetDir))
 .pipe(size({title: 'i18n copied'}));
 });*/


